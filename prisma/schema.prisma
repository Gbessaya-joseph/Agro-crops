// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  FOURNISSEUR
  PRENEUR
}

enum PropositionStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model User {
  id            String     @id @default(uuid()) @map("id") @db.VarChar(36)
  email         String     @unique
  password      String?    @db.VarChar(255)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String?
  avatar        String?    @db.VarChar(512)
  avatarPublicId String?   @db.VarChar(255)
  role          Role
  fournisseur   Fournisseur?
  preneur       Preneur?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @db.VarChar(36)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String
  providerAccountId String
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  userId       String    @db.VarChar(36)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String    @unique
}

model Fournisseur {
  idFourn      Int       @id @default(autoincrement())
  userId       String    @unique @db.VarChar(36)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String? 
  TelFourn     String    @unique @db.Char(8)
  LocalFourn   String
  Produit      Produit[]
  propositions Proposition[]
  commandes    Commande[]
}

model Preneur {
  idPren       Int       @id @default(autoincrement())
  userId       String    @unique @db.VarChar(36)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String?
  TyPren       String?
  TelPren      String    @unique @db.Char(8)
  LocalPren      String
  propositions Proposition[]
  commandes    Commande[]
}

model Commande {
  NumCmde     Int      @id @default(autoincrement())
  DateCmde    DateTime @default(now())
  QteCmde     Int
  StatusCmd   String
  RefldPren   Int
  RefldFourn  Int
  RefldProd   Int
  preneur     Preneur  @relation(fields: [RefldPren], references: [idPren])
  fournisseur Fournisseur @relation(fields: [RefldFourn], references: [idFourn])
  produit     Produit  @relation(fields: [RefldProd], references: [idProd])
}

model Produit {
  idProd      Int      @id @default(autoincrement())
  NomProd     String   @unique
  ImageUrl    String?  @db.VarChar(512)
  publicId    String?  @db.VarChar(255)
  RefldCat    Int
  categorie   Categorie @relation(fields: [RefldCat], references: [idCat])
  RefldFourn  Int
  propositions Proposition[]
  commandes    Commande[]
  fournisseur Fournisseur @relation(fields: [RefldFourn], references: [idFourn])
  @@index([RefldCat])
}

model Categorie {
  idCat       Int      @id @default(autoincrement())
  NomCat      String   @unique
  produits    Produit[]
}

model Proposition {
  idProp      Int      @id @default(autoincrement())
  QteProp     Int
  DateProp    DateTime @default(now())
  DateModifProp DateTime @updatedAt
  StatusProp  PropositionStatus
  PrixProp    Float
  DateExpirProp DateTime
  RefldFourn  Int
  RefldPren   Int?
  RefldProd   Int
  fournisseur Fournisseur @relation(fields: [RefldFourn], references: [idFourn])
  preneur     Preneur?  @relation(fields: [RefldPren], references: [idPren])
  produit     Produit  @relation(fields: [RefldProd], references: [idProd])
}